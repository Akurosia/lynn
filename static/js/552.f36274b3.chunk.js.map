{"version":3,"file":"static/js/552.f36274b3.chunk.js","mappings":"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","sources":["weather_finder/WeatherConditionCardComponent.jsx","weather_finder/ForecastResultComponent.jsx","weather_finder/weather-favorability.js","weather_finder/ForecastResultsHeaderComponent.jsx","weather_finder/ForecastResultsComponent.jsx","weather_finder/ForecastOptionsSelectorComponent.jsx","weather_finder/FavorableWeatherFinder.jsx"],"sourcesContent":["import React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport './WeatherConditionCard.css';\n\nexport default function WeatherConditionCardComponent({ data }) {\n  const weatherIconMapping = {\n    'Astromagnetic Storm': 'AstromagneticStorm.png',\n    Blizzards: 'Blizzards.png',\n    'Clear Skies': 'ClearSkies.png',\n    Clouds: 'Clouds.png',\n    'Dust Storms': 'DustStorms.png',\n    'Fair Skies': 'FairSkies.png',\n    Fog: 'Fog.png',\n    Gales: 'Gales.png',\n    Gloom: 'Gloom.png',\n    'Heat Waves': 'HeatWaves.png',\n    'Moon Dust': 'MoonDust.png',\n    Rain: 'Rain.png',\n    Showers: 'Showers.png',\n    Snow: 'Snow.png',\n    Thunder: 'Thunder.png',\n    Thunderstorms: 'Thunderstorms.png',\n    'Umbral Static': 'UmbralStatic.png',\n    'Umbral Wind': 'UmbralWind.png',\n    Wind: 'Wind.png',\n  };\n\n  const weatherIcon = weatherIconMapping[data.condition];\n  return (\n    <Card className=\"WeatherConditionCard\">\n      <CardContent>\n        <Stack alignItems=\"center\">\n          <Typography>\n            {data.condition}\n          </Typography>\n          <Box>\n            <img\n              src={`${process.env.PUBLIC_URL}/assets/weathericons/${weatherIcon}`}\n              alt={weatherIcon}\n            />\n          </Box>\n\n          <Typography variant=\"h6\">\n            {data.time.toLocaleString('en-US', {\n              hour: 'numeric',\n              minute: 'numeric',\n            })}\n          </Typography>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport Container from '@mui/material/Container';\nimport Divider from '@mui/material/Divider';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { v4 as uuidv4 } from 'uuid';\nimport WeatherConditionCardComponent from './WeatherConditionCardComponent';\nimport './ForecastResult.css';\n\nexport default function ForecastResultComponent({ data }) {\n  return (\n    <Paper className=\"WeatherForecastResultPaper\" variant=\"outlined\">\n      <Stack spacing={2}>\n        <Grid container spacing={2} sx={{ paddingLeft: 4, paddingTop: 2, textAlign: 'left' }}>\n          <Grid item xs>\n            <Typography variant=\"overline\">\n              Starting time\n            </Typography>\n            <Typography variant=\"h4\">\n              {data.startingTime.toLocaleString('en-US', {\n                weekday: 'long',\n                day: 'numeric',\n                month: 'short',\n                hour: 'numeric',\n                minute: 'numeric',\n                timeZoneName: 'short',\n              })}\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Typography variant=\"overline\">\n              Score\n            </Typography>\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n              {data.favorability.toFixed(2)}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Container>\n          <Divider variant=\"middle\" />\n        </Container>\n\n        <Stack\n          className=\"WeatherConditionsContainer\"\n          direction=\"row\"\n          spacing={2}\n          divider={<ChevronRightIcon fontSize=\"large\" />}\n        >\n          {data.conditions.map((item) => (\n            <WeatherConditionCardComponent data={item} key={`condition-${uuidv4()}`} />\n          ))}\n        </Stack>\n      </Stack>\n    </Paper>\n  );\n}\n","import EorzeaWeather from 'lynn-eorzea-weather';\nimport sortBy from 'underscore/modules/sortBy';\n\nconst EORZEA_TIME_DILATION = 20.571428571428573;\nconst EIGHT_HOURS_IN_MS = 8 * 1000 * 60 * 60;\nconst EORZEA_WEATHER_DURATION_MS = (23 * 60000) + (20 * 1000);\n// const WEATHER_CHANGES_PER_WEEK = 432;\n\n// Zone mappings for EorzeaWeather\nconst zoneMapping = {};\nzoneMapping[EorzeaWeather.ZONE_AMH_ARAENG] = 'Amh Araeng';\nzoneMapping[EorzeaWeather.ZONE_AZYS_LLA] = 'Azys Lla';\nzoneMapping[EorzeaWeather.ZONE_BOZJAN_SOUTHERN_FRONT] = 'The Bozjan Southern Front';\nzoneMapping[EorzeaWeather.ZONE_CENTRAL_SHROUD] = 'Central Shroud';\nzoneMapping[EorzeaWeather.ZONE_CENTRAL_THANALAN] = 'Central Thanalan';\nzoneMapping[EorzeaWeather.ZONE_COERTHAS_CENTRAL_HIGHLANDS] = 'Coerthas Central Highlands';\nzoneMapping[EorzeaWeather.ZONE_COERTHAS_WESTERN_HIGHLANDS] = 'Coerthas Western Highlands';\nzoneMapping[EorzeaWeather.ZONE_EAST_SHROUD] = 'East Shroud';\nzoneMapping[EorzeaWeather.ZONE_EASTERN_LA_NOSCEA] = 'Eastern La Noscea';\nzoneMapping[EorzeaWeather.ZONE_EASTERN_THANALAN] = 'Eastern Thanalan';\nzoneMapping[EorzeaWeather.ZONE_EULMORE] = 'Eulmore';\nzoneMapping[EorzeaWeather.ZONE_EUREKA_ANEMOS] = 'Eureka Anemos';\nzoneMapping[EorzeaWeather.ZONE_EUREKA_PAGOS] = 'Eureka Pagos';\nzoneMapping[EorzeaWeather.ZONE_EUREKA_PYROS] = 'Eureka Pyros';\nzoneMapping[EorzeaWeather.ZONE_EUREKA_HYDATOS] = 'Eureka Hydatos';\nzoneMapping[EorzeaWeather.ZONE_GRIDANIA] = 'Gridania';\nzoneMapping[EorzeaWeather.ZONE_IDYLLSHIRE] = 'Idyllshire';\nzoneMapping[EorzeaWeather.ZONE_IL_MHEG] = 'Il Mheg';\nzoneMapping[EorzeaWeather.ZONE_ISHGARD] = 'Ishgard';\nzoneMapping[EorzeaWeather.ZONE_KHOLUSIA] = 'Kholusia';\nzoneMapping[EorzeaWeather.ZONE_KUGANE] = 'Kugane';\nzoneMapping[EorzeaWeather.ZONE_LAKELAND] = 'Lakeland';\nzoneMapping[EorzeaWeather.ZONE_LIMSA_LOMINSA] = 'Limsa Lominsa';\nzoneMapping[EorzeaWeather.ZONE_LOWER_LA_NOSCEA] = 'Lower La Noscea';\nzoneMapping[EorzeaWeather.ZONE_MIDDLE_LA_NOSCEA] = 'Middle La Noscea';\nzoneMapping[EorzeaWeather.ZONE_MIST] = 'Mist';\nzoneMapping[EorzeaWeather.ZONE_MOR_DHONA] = 'Mor Dhona';\nzoneMapping[EorzeaWeather.ZONE_NORTH_SHROUD] = 'North Shroud';\nzoneMapping[EorzeaWeather.ZONE_NORTHERN_THANALAN] = 'Northern Thanalan';\nzoneMapping[EorzeaWeather.ZONE_OUTER_LA_NOSCEA] = 'Outer La Noscea';\nzoneMapping[EorzeaWeather.ZONE_RHALGRS_REACH] = 'Rhalgr\\'s Reach';\nzoneMapping[EorzeaWeather.ZONE_SHIROGANE] = 'Shirogane';\nzoneMapping[EorzeaWeather.ZONE_SOUTH_HORN] = 'Occult Crescent: South Horn';\nzoneMapping[EorzeaWeather.ZONE_SOUTH_SHROUD] = 'South Shroud';\nzoneMapping[EorzeaWeather.ZONE_SOUTHERN_THANALAN] = 'Southern Thanalan';\nzoneMapping[EorzeaWeather.ZONE_THE_AZIM_STEPPE] = 'The Azim Steppe';\nzoneMapping[EorzeaWeather.ZONE_THE_CHURNING_MISTS] = 'The Churning Mists';\nzoneMapping[EorzeaWeather.ZONE_THE_CRYSTARIUM] = 'The Crystarium';\nzoneMapping[EorzeaWeather.ZONE_THE_DIADEM] = 'The Diadem';\nzoneMapping[EorzeaWeather.ZONE_THE_DRAVANIAN_FORELANDS] = 'The Dravanian Forelands';\nzoneMapping[EorzeaWeather.ZONE_THE_DRAVANIAN_HINTERLANDS] = 'The Dravanian Hinterlands';\nzoneMapping[EorzeaWeather.ZONE_THE_FRINGES] = 'The Fringes';\nzoneMapping[EorzeaWeather.ZONE_THE_GOBLET] = 'The Goblet';\nzoneMapping[EorzeaWeather.ZONE_THE_LAVENDER_BEDS] = 'The Lavender Beds';\nzoneMapping[EorzeaWeather.ZONE_THE_LOCHS] = 'The Lochs';\nzoneMapping[EorzeaWeather.ZONE_THE_PEAKS] = 'The Peaks';\nzoneMapping[EorzeaWeather.ZONE_THE_RAKTIKA_GREATWOOD] = 'The Rak\\'tika Greatwood';\nzoneMapping[EorzeaWeather.ZONE_THE_RUBY_SEA] = 'The Ruby Sea';\nzoneMapping[EorzeaWeather.ZONE_THE_SEA_OF_CLOUDS] = 'The Sea of Clouds';\nzoneMapping[EorzeaWeather.ZONE_THE_TEMPEST] = 'The Tempest';\nzoneMapping[EorzeaWeather.ZONE_ULDAH] = 'Ul\\'dah';\nzoneMapping[EorzeaWeather.ZONE_UPPER_LA_NOSCEA] = 'Upper La Noscea';\nzoneMapping[EorzeaWeather.ZONE_WESTERN_LA_NOSCEA] = 'Western La Noscea';\nzoneMapping[EorzeaWeather.ZONE_WESTERN_THANALAN] = 'Western Thanalan';\nzoneMapping[EorzeaWeather.ZONE_WOLVES_DEN_PIER] = 'Wolves\\' Den Pier';\nzoneMapping[EorzeaWeather.ZONE_YANXIA] = 'Yanxia';\nzoneMapping[EorzeaWeather.ZONE_ZADNOR] = 'Zadnor';\n\n/**\n * Overall logic here:\n * - assign a value to each favorable weather condition (dust storms, wind, thunder)\n * - for each segment (23m 20s), calculate a score for the patterns during the following n minutes\n * - sort and return\n *\n * - input: conditions and weights, time slice (3h default)\n * - return a sorted list of weights\n */\n\nconst calculateWeatherForTimePeriod = (\n  segments,\n  startDate = new Date(),\n  location = EorzeaWeather.ZONE_BOZJAN_SOUTHERN_FRONT,\n) => {\n  const currentEorzeaEpoch = startDate.getTime() * EORZEA_TIME_DILATION;\n\n  // Align to start of current weather segment\n  const weatherStartEorzeaEpoch = currentEorzeaEpoch\n    - (currentEorzeaEpoch % EIGHT_HOURS_IN_MS)\n    + 1;\n  const weatherStartDate = new Date(Math.round(weatherStartEorzeaEpoch / EORZEA_TIME_DILATION));\n\n  const weatherArray = [];\n  for (let i = 0; i < segments; i += 1) {\n    const time = new Date(weatherStartDate.getTime() + (i * EORZEA_WEATHER_DURATION_MS));\n    const weatherCondition = EorzeaWeather.getWeather(location, time);\n    weatherArray.push({\n      time,\n      condition: weatherCondition,\n    });\n  }\n\n  return weatherArray;\n};\n\n/**\n *\n * @param {*} conditions A generated list of conditions and start times\n *            (see calculateWeatherForTimePeriod)\n * @param {*} slice_duration The amount of time (ms) each time slice should be\n *            (e.g. 3 hours to align w/ BSF lockout)\n * @param {*} favorability_ranking Set of ranking scores for each condition and combinations\n */\nconst calculateFavorabilityScoresForTimeSlice = (\n  conditions,\n  sliceDuration,\n  favorabilityRanking,\n) => {\n  /**\n   * Since each weather period lasts 23m 20s, calculate how many changes should occur during the\n   * provided duration. The last slice will be handled independently of this, since it will\n   * be for less than the full weather duration.\n   */\n  const lookaheadSliceCount = Math.floor(sliceDuration / EORZEA_WEATHER_DURATION_MS);\n  // Percentage factor for the last slice\n  const lastSlicePct = (sliceDuration % EORZEA_WEATHER_DURATION_MS) / sliceDuration;\n  const weightedStartTimes = {};\n\n  for (let i = 0; i < conditions.length - lookaheadSliceCount - 1; i += 1) {\n    // For each slice, calculate the favorability score including the partial slice\n    let favorability = 0;\n    for (let j = 0; j < lookaheadSliceCount; j += 1) {\n      const conditionEntry = conditions[i + j];\n      const favorabilityForEntry = favorabilityRanking.conditions[conditionEntry.condition];\n      if (favorabilityForEntry != null) {\n        if (favorability > 0) {\n          favorability += favorabilityRanking.combinations;\n        }\n        favorability += favorabilityForEntry;\n      }\n    }\n\n    // Calculate partial slice\n    const conditionEntry = conditions[i + lookaheadSliceCount];\n    const favorabilityForEntry = favorabilityRanking.conditions[conditionEntry.condition];\n    if (favorabilityForEntry != null) {\n      if (favorability > 0) {\n        favorability += favorabilityRanking.combinations * lastSlicePct;\n      }\n      favorability += favorabilityForEntry * lastSlicePct;\n    }\n\n    if (favorability > 0) {\n      weightedStartTimes[conditions[i].time] = {\n        startingTime: conditions[i].time,\n        favorability,\n      };\n    }\n  }\n\n  return weightedStartTimes;\n};\n\nconst sortAndReturnTopNTimeSlices = (unsortedSlices, resultLength) => {\n  const sortedResults = sortBy(unsortedSlices, (i) => -(i.favorability));\n  return sortedResults.slice(0, resultLength);\n};\n\nconst generateConditionsForFavorableTimes = (favorabilityScores, sliceDuration, location) => {\n  const output = [];\n  for (let i = 0; i < favorabilityScores.length; i += 1) {\n    const weatherChangesPerSliceDuration = Math.ceil(sliceDuration / EORZEA_WEATHER_DURATION_MS);\n    const conditions = calculateWeatherForTimePeriod(\n      weatherChangesPerSliceDuration,\n      favorabilityScores[i].startingTime,\n      location,\n    );\n    output.push({\n      startingTime: favorabilityScores[i].startingTime,\n      duration: sliceDuration,\n      favorability: favorabilityScores[i].favorability,\n      conditions,\n    });\n  }\n  return output;\n};\n\n/**\n *\n * @param {*} slice_length The length of each slice in ms. Usually this is the lockout period\n *            for an instance (3 hours = 10800000)\n * @param {*} lookahead_segments How far in the future to search, calculated in terms of weather\n *            changes. The weather changes every 23m 20s, which corresponds to 432 changes per week.\n * @param {*} start_time The starting time for the search. Defaults to now.\n * @param {*} location The location to look up weather data for, defaults to Bozjan Southern Front.\n * @param {*} favorability_ranking The ranking criteria for each weather condition, and a bonus\n *            applied to additional favorable weather conditions during a slice.\n * @returns\n */\n/**\nconst getFavorability = (\n  slice_length,\n  lookahead_segments,\n  start_time = new Date(),\n  location = EorzeaWeather.ZONE_BOZJAN_SOUTHERN_FRONT,\n  favorability_ranking = favorability_ranking\n  ) => {\n  const scores = calculateFavorabilityScoresForTimeSlice(\n    calculateWeatherForTimePeriod(lookahead_segments, start_time, location),\n    slice_length,\n    favorability_ranking);\n  const scores_to_display = sortAndReturnTopNTimeSlices(scores, 10);\n  return generateConditionsForFavorableTimes(scores_to_display, slice_length, location);\n}\n*/\n\nclass WeatherFavorability {\n  static ZoneMapping = zoneMapping;\n\n  static getFavorability(\n    sliceLength,\n    lookaheadSegments,\n    startTime = new Date(),\n    location = EorzeaWeather.ZONE_BOZJAN_SOUTHERN_FRONT,\n    favorabilityRanking = [],\n  ) {\n    const scores = calculateFavorabilityScoresForTimeSlice(\n      calculateWeatherForTimePeriod(lookaheadSegments, startTime, location),\n      sliceLength,\n      favorabilityRanking,\n    );\n    const scoresToDisplay = sortAndReturnTopNTimeSlices(scores, 10);\n    return generateConditionsForFavorableTimes(scoresToDisplay, sliceLength, location);\n  }\n}\n\nexport default WeatherFavorability;\n","import React from 'react';\n\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport AvTimerIcon from '@mui/icons-material/AvTimer';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport HistoryIcon from '@mui/icons-material/History';\n\nimport WeatherFavorability from './weather-favorability';\n\nexport default function ForecastResultsHeaderComponent({\n  location, sessionLength, searchDuration, startTime,\n}) {\n  return (\n    <Stack spacing={1}>\n      <Container sx={{ paddingTop: '16px', paddingBottom: '12px' }}>\n        <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n          Results\n        </Typography>\n      </Container>\n      <Grid container spacing={0}>\n        <Grid item xs>\n          <Typography variant=\"overline\">\n            Location\n          </Typography>\n          <Stack direction=\"row\" spacing={1} justifyContent=\"center\" alignItems=\"center\">\n            <LocationOnIcon />\n            <Typography>\n              {WeatherFavorability.ZoneMapping[location]}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs>\n          <Typography variant=\"overline\">\n            Session length\n          </Typography>\n          <Stack direction=\"row\" spacing={1} justifyContent=\"center\" alignItems=\"center\">\n            <AvTimerIcon />\n            <Typography>\n              {sessionLength}\n              {' '}\n              minutes\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs>\n          <Typography variant=\"overline\">\n            Search duration\n          </Typography>\n          <Stack direction=\"row\" spacing={1} justifyContent=\"center\" alignItems=\"center\">\n            <HistoryIcon />\n            <Typography>\n              {searchDuration}\n              {' '}\n              days\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs>\n          <Typography variant=\"overline\">\n            Start Time\n          </Typography>\n          <Stack direction=\"row\" spacing={1} justifyContent=\"center\" alignItems=\"center\">\n            <AccessTimeIcon />\n            <Typography>\n              {startTime.toLocaleString('en-US', {\n                day: 'numeric',\n                month: 'numeric',\n                year: 'numeric',\n                hour: 'numeric',\n                minute: 'numeric',\n                timeZoneName: 'short',\n              })}\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </Stack>\n  );\n}\n","import React from 'react';\nimport Paper from '@mui/material/Paper';\n\nimport './ForecastResults.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport ForecastResultComponent from './ForecastResultComponent';\nimport WeatherFavorability from './weather-favorability';\nimport ForecastResultsHeaderComponent from './ForecastResultsHeaderComponent';\n\nexport default function ForecastResultsComponent({\n  location, searchDuration, sessionLength, startDate, ranking,\n}) {\n  const WEATHER_CHANGES_PER_DAY = 61.71429;\n  const MINUTES_TO_MS = 60000;\n\n  const favorabilityData = WeatherFavorability.getFavorability(\n    sessionLength * MINUTES_TO_MS,\n    Math.ceil(searchDuration * WEATHER_CHANGES_PER_DAY),\n    startDate,\n    location,\n    ranking,\n  );\n\n  return (\n    <div className=\"ForecastResults\">\n      <Paper className=\"ForecastResultsPaper\" elevation={1}>\n        <ForecastResultsHeaderComponent\n          location={location}\n          searchDuration={searchDuration}\n          sessionLength={sessionLength}\n          startTime={startDate}\n        />\n        <div className=\"ForecastResultsContainer\">\n          {favorabilityData.map((item) => (\n            <ForecastResultComponent data={item} key={`favorability-${uuidv4()}`} />\n          ))}\n        </div>\n      </Paper>\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Grid from '@mui/material/Grid';\nimport ListItemText from '@mui/material/ListItemText';\nimport MenuItem from '@mui/material/MenuItem';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Paper from '@mui/material/Paper';\nimport Select from '@mui/material/Select';\nimport Slider from '@mui/material/Slider';\nimport TextField from '@mui/material/TextField';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Typography from '@mui/material/Typography';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport WeatherFavorability from './weather-favorability';\nimport './ForecastOptionsSelector.css';\n\nexport default function ForecastOptionsSelectorComponent(\n  {\n    location, startDate, ranking, handleSubmit,\n  },\n) {\n  const defaultFragmentRanking = {\n    conditions: {\n      'Dust Storms': 4,\n      Wind: 2,\n      Thunder: 1,\n    },\n    combinations: 2,\n    type: 'fragment',\n  };\n  const defaultCustomRanking = {\n    conditions: {\n    },\n    combinations: 2,\n    type: 'custom',\n  };\n\n  /**\n   * Component State\n   */\n  const [locationState, setLocationState] = useState(location);\n  const [startDateState, setStartDateState] = useState(startDate);\n  const [sessionLengthState, setSessionLengthState] = useState(180);\n  const [searchDurationState, setSearchDurationState] = useState(7);\n  const [rankingState, setRankingState] = useState(ranking);\n\n  const handleLocationChange = useCallback((event) => {\n    setLocationState(event.target.value);\n  }, [setLocationState]);\n\n  const handleDateChange = useCallback((event) => {\n    setStartDateState(event.toDate());\n  }, [setStartDateState]);\n\n  const handleSessionLengthChange = useCallback((event) => {\n    if (event.target.value !== sessionLengthState) {\n      setSessionLengthState(event.target.value);\n    }\n  }, [sessionLengthState, setSessionLengthState]);\n\n  const handleSearchDurationChange = useCallback((event) => {\n    if (event.target.value !== searchDurationState) {\n      setSearchDurationState(event.target.value);\n    }\n  }, [searchDurationState, setSearchDurationState]);\n\n  const displaySessionLength = useCallback((value) => `${value} min`);\n  const displaySearchDuration = useCallback((value) => `${value} days`);\n\n  const handleRankingSelectorChange = useCallback((event, value) => {\n    if (value === 'fragment') {\n      setRankingState(defaultFragmentRanking);\n    } else if (value === 'custom') {\n      setRankingState(defaultCustomRanking);\n    }\n  }, [defaultCustomRanking, defaultFragmentRanking, setRankingState]);\n\n  const handleConditionSelectorChange = useCallback((event) => {\n    const newConditions = event.target.value;\n    const newConditionRankings = {};\n    for (let i = 0; i < newConditions.length; i += 1) {\n      newConditionRankings[newConditions[i]] = 2;\n    }\n    const newRanking = {\n      conditions: newConditionRankings,\n      combinations: rankingState.combinations,\n      type: rankingState.type,\n    };\n\n    setRankingState(newRanking);\n  }, [rankingState, setRankingState]);\n\n  const handleSubmitButtonPressed = useCallback(() => {\n    handleSubmit({\n      locationState,\n      startDateState,\n      sessionLengthState,\n      searchDurationState,\n      rankingState,\n    });\n  }, [handleSubmit,\n    locationState,\n    startDateState,\n    sessionLengthState,\n    searchDurationState,\n    rankingState]);\n\n  /**\n   * Render Logic\n   */\n  const sessionLengthMarks = [\n    {\n      value: 60,\n      label: '1h',\n    },\n    {\n      value: 120,\n      label: '2h',\n    },\n    {\n      value: 180,\n      label: '3h',\n    },\n    {\n      value: 240,\n      label: '4h',\n    },\n    {\n      value: 300,\n      label: '5h',\n    },\n    {\n      value: 360,\n      label: '6h',\n    },\n  ];\n\n  const searchDurationMarks = [\n    {\n      value: 1,\n      label: '1d',\n    },\n    {\n      value: 3,\n      label: '3d',\n    },\n    {\n      value: 7,\n      label: '1w',\n    },\n    {\n      value: 14,\n      label: '2w',\n    },\n    {\n      value: 28,\n      label: '4w',\n    },\n  ];\n\n  const weatherConditions = [\n    'Astromagnetic Storm',\n    'Blizzards',\n    'Clear Skies',\n    'Clouds',\n    'Dust Storms',\n    'Fair Skies',\n    'Fog',\n    'Gales',\n    'Gloom',\n    'Heat Waves',\n    'Moon Dust',\n    'Rain',\n    'Showers',\n    'Snow',\n    'Thunder',\n    'Thunderstorms',\n    'Umbral Static',\n    'Umbral Wind',\n    'Wind',\n  ];\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 7.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  /* eslint-disable react/jsx-props-no-spreading */\n  return (\n    <div className=\"ForecastOptionsSelector\">\n      <Paper className=\"ForecastOptionsPaper\" elevation={1}>\n        <Grid container spacing={2} justifyContent=\"center\">\n          <Grid item xs={4} sx={{ p: 4 }}>\n            <ToggleButtonGroup\n              color=\"primary\"\n              value={rankingState.type}\n              exclusive\n              onChange={handleRankingSelectorChange}\n            >\n              <ToggleButton value=\"fragment\">Fragment Farming</ToggleButton>\n              <ToggleButton value=\"custom\">Select Conditions</ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n          <Grid item xs={4} sx={{ p: 4 }}>\n            <FormControl sx={{ m: 1, width: 300 }}>\n              <InputLabel id=\"forecast-weather-condition-select-label\">Conditions</InputLabel>\n              <Select\n                labelId=\"forecast-weather-condition-select-label\"\n                id=\"forecast-weather-condition-select\"\n                multiple\n                value={Object.keys(rankingState.conditions)}\n                input={<OutlinedInput label=\"Conditions\" />}\n                renderValue={(selected) => selected.join(', ')}\n                onChange={handleConditionSelectorChange}\n                MenuProps={MenuProps}\n                disabled={rankingState.type !== 'custom'}\n              >\n                {weatherConditions.map((condition) => (\n                  <MenuItem key={condition} value={condition}>\n                    <Checkbox checked={rankingState.conditions[condition] != null} />\n                    <ListItemText primary={condition} />\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={2} justifyContent=\"center\">\n          <Grid item xs={4} sx={{ p: 4 }}>\n            <FormControl>\n              <InputLabel id=\"forecast-location-select-label\">Location</InputLabel>\n              <Select\n                labelId=\"forecast-location-select-label\"\n                id=\"forecast-location-select\"\n                value={locationState}\n                label=\"Location\"\n                onChange={handleLocationChange}\n              >\n                {Object.keys(WeatherFavorability.ZoneMapping).map(\n                  (key) => (\n                    <MenuItem\n                      key={key}\n                      value={key}\n                    >\n                      {WeatherFavorability.ZoneMapping[key]}\n                    </MenuItem>\n                  ),\n                )}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={4} sx={{ p: 4 }}>\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n              <DateTimePicker\n                label=\"Start date\"\n                value={startDateState}\n                onChange={handleDateChange}\n                renderInput={(params) => <TextField {...params} />}\n              />\n            </LocalizationProvider>\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={2} justifyContent=\"center\">\n          <Grid item xs={4} sx={{ p: 4 }}>\n            <Box>\n              <Typography gutterBottom>\n                Session length\n              </Typography>\n              <Slider\n                aria-label=\"Session length\"\n                defaultValue={180}\n                getAriaValueText={displaySessionLength}\n                valueLabelDisplay=\"auto\"\n                step={15}\n                marks={sessionLengthMarks}\n                min={15}\n                max={360}\n                onChange={handleSessionLengthChange}\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={4} sx={{ p: 4 }}>\n            <Box>\n              <Typography gutterBottom>\n                Search duration\n              </Typography>\n              <Slider\n                aria-label=\"Search duration\"\n                defaultValue={7}\n                getAriaValueText={displaySearchDuration}\n                valueLabelDisplay=\"auto\"\n                step={0.5}\n                marks={searchDurationMarks}\n                min={0.5}\n                max={28}\n                onChange={handleSearchDurationChange}\n              />\n            </Box>\n          </Grid>\n        </Grid>\n        <Button variant=\"contained\" onClick={handleSubmitButtonPressed}>\n          Update\n        </Button>\n      </Paper>\n    </div>\n  );\n}\n","import React, { useState, useCallback } from 'react';\nimport Container from '@mui/material/Container';\nimport Stack from '@mui/material/Stack';\nimport EorzeaWeather from 'lynn-eorzea-weather';\nimport ForecastResultsComponent from './ForecastResultsComponent';\nimport ForecastOptionsSelectorComponent from './ForecastOptionsSelectorComponent';\n\nexport default function FavorableWeatherFinderComponent() {\n  const fragmentFavorabilityRanking = {\n    conditions: {\n      'Dust Storms': 4,\n      Wind: 2,\n      Thunder: 1,\n    },\n    combinations: 2,\n    type: 'fragment',\n  };\n\n  /**\n   * Component State\n   */\n  const [location, setLocation] = useState(EorzeaWeather.ZONE_BOZJAN_SOUTHERN_FRONT);\n  const [startDate, setStartDate] = useState(new Date());\n  const [sessionLength, setSessionLength] = useState(180);\n  const [searchDuration, setSearchDuration] = useState(7);\n  const [ranking, setRanking] = useState(fragmentFavorabilityRanking);\n\n  const handleSubmit = useCallback((data) => {\n    setLocation(data.locationState);\n    setStartDate(data.startDateState);\n    setSessionLength(data.sessionLengthState);\n    setSearchDuration(data.searchDurationState);\n    setRanking(data.rankingState);\n  }, [setLocation, setStartDate, setSessionLength, setSearchDuration, setRanking]);\n\n  /**\n   * Render Logic\n   */\n  return (\n    <Container maxWidth=\"lg\">\n      <Stack spacing={2} sx={{ paddingTop: 6 }}>\n        <ForecastOptionsSelectorComponent\n          location={location}\n          startDate={startDate}\n          sessionLength={sessionLength}\n          searchDuration={searchDuration}\n          ranking={ranking}\n          handleSubmit={handleSubmit}\n        />\n        <ForecastResultsComponent\n          location={location}\n          startDate={startDate}\n          sessionLength={sessionLength}\n          searchDuration={searchDuration}\n          ranking={ranking}\n        />\n      </Stack>\n    </Container>\n\n  );\n}\n"],"names":["WeatherConditionCardComponent","_ref","data","weatherIcon","Blizzards","Clouds","Fog","Gales","Gloom","Rain","Showers","Snow","Thunder","Thunderstorms","Wind","condition","_jsx","Card","className","children","CardContent","_jsxs","Stack","alignItems","Typography","Box","src","concat","process","alt","variant","time","toLocaleString","hour","minute","ForecastResultComponent","Paper","spacing","Grid","container","sx","paddingLeft","paddingTop","textAlign","item","xs","startingTime","weekday","day","month","timeZoneName","fontWeight","favorability","toFixed","Container","Divider","direction","divider","ChevronRightIcon","fontSize","conditions","map","uuidv4","EORZEA_TIME_DILATION","EORZEA_WEATHER_DURATION_MS","zoneMapping","EorzeaWeather","ZONE_AMH_ARAENG","ZONE_AZYS_LLA","ZONE_BOZJAN_SOUTHERN_FRONT","ZONE_CENTRAL_SHROUD","ZONE_CENTRAL_THANALAN","ZONE_COERTHAS_CENTRAL_HIGHLANDS","ZONE_COERTHAS_WESTERN_HIGHLANDS","ZONE_EAST_SHROUD","ZONE_EASTERN_LA_NOSCEA","ZONE_EASTERN_THANALAN","ZONE_EULMORE","ZONE_EUREKA_ANEMOS","ZONE_EUREKA_PAGOS","ZONE_EUREKA_PYROS","ZONE_EUREKA_HYDATOS","ZONE_GRIDANIA","ZONE_IDYLLSHIRE","ZONE_IL_MHEG","ZONE_ISHGARD","ZONE_KHOLUSIA","ZONE_KUGANE","ZONE_LAKELAND","ZONE_LIMSA_LOMINSA","ZONE_LOWER_LA_NOSCEA","ZONE_MIDDLE_LA_NOSCEA","ZONE_MIST","ZONE_MOR_DHONA","ZONE_NORTH_SHROUD","ZONE_NORTHERN_THANALAN","ZONE_OUTER_LA_NOSCEA","ZONE_RHALGRS_REACH","ZONE_SHIROGANE","ZONE_SOUTH_HORN","ZONE_SOUTH_SHROUD","ZONE_SOUTHERN_THANALAN","ZONE_THE_AZIM_STEPPE","ZONE_THE_CHURNING_MISTS","ZONE_THE_CRYSTARIUM","ZONE_THE_DIADEM","ZONE_THE_DRAVANIAN_FORELANDS","ZONE_THE_DRAVANIAN_HINTERLANDS","ZONE_THE_FRINGES","ZONE_THE_GOBLET","ZONE_THE_LAVENDER_BEDS","ZONE_THE_LOCHS","ZONE_THE_PEAKS","ZONE_THE_RAKTIKA_GREATWOOD","ZONE_THE_RUBY_SEA","ZONE_THE_SEA_OF_CLOUDS","ZONE_THE_TEMPEST","ZONE_ULDAH","ZONE_UPPER_LA_NOSCEA","ZONE_WESTERN_LA_NOSCEA","ZONE_WESTERN_THANALAN","ZONE_WOLVES_DEN_PIER","ZONE_YANXIA","ZONE_ZADNOR","calculateWeatherForTimePeriod","segments","startDate","arguments","length","undefined","Date","location","currentEorzeaEpoch","getTime","weatherStartEorzeaEpoch","weatherStartDate","Math","round","weatherArray","i","weatherCondition","getWeather","push","WeatherFavorability","getFavorability","sliceLength","lookaheadSegments","startTime","favorabilityRanking","scores","calculateFavorabilityScoresForTimeSlice","sliceDuration","lookaheadSliceCount","floor","lastSlicePct","weightedStartTimes","j","conditionEntry","favorabilityForEntry","combinations","sortAndReturnTopNTimeSlices","unsortedSlices","resultLength","generateConditionsForFavorableTimes","favorabilityScores","output","weatherChangesPerSliceDuration","ceil","duration","sortBy","slice","ZoneMapping","ForecastResultsHeaderComponent","sessionLength","searchDuration","paddingBottom","justifyContent","LocationOnIcon","AvTimerIcon","HistoryIcon","AccessTimeIcon","year","ForecastResultsComponent","ranking","favorabilityData","elevation","ForecastOptionsSelectorComponent","handleSubmit","defaultFragmentRanking","type","defaultCustomRanking","locationState","setLocationState","useState","startDateState","setStartDateState","sessionLengthState","setSessionLengthState","searchDurationState","setSearchDurationState","rankingState","setRankingState","handleLocationChange","useCallback","event","target","value","handleDateChange","toDate","handleSessionLengthChange","handleSearchDurationChange","displaySessionLength","displaySearchDuration","handleRankingSelectorChange","handleConditionSelectorChange","newConditions","newConditionRankings","newRanking","handleSubmitButtonPressed","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","p","ToggleButtonGroup","color","exclusive","onChange","ToggleButton","FormControl","m","InputLabel","id","Select","labelId","multiple","Object","keys","input","OutlinedInput","label","renderValue","selected","join","disabled","MenuItem","Checkbox","checked","ListItemText","primary","key","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","renderInput","params","TextField","_objectSpread","gutterBottom","Slider","defaultValue","getAriaValueText","valueLabelDisplay","step","marks","min","max","Button","onClick","FavorableWeatherFinderComponent","setLocation","setStartDate","setSessionLength","setSearchDuration","setRanking","maxWidth"],"sourceRoot":""}