{"version":3,"file":"static/js/100.3d92f473.chunk.js","mappings":"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","sources":["drs/lib/DRSHolsterHelper.js"],"sourcesContent":["import { Buffer } from 'buffer';\nimport DRSLostActionHelper from './DRSLostActionHelper';\n\nconst holsters = require('./Holsters.json');\n\nclass DRSHolsterHelper {\n  static getHolsterData(host, type, loadoutName) {\n    const holstersForType = holsters.host[host].holsters[type];\n    if (holstersForType === undefined) {\n      return null;\n    }\n\n    return holstersForType.holsters[loadoutName];\n  }\n\n  static getFriendlyHolsterSetName(host, set) {\n    return holsters.host[host].holsters[set].name;\n  }\n\n  static getAvailableHolsterSets() {\n    const holsterSetKeys = Object.keys(holsters);\n    const holsterSets = {};\n    for (let i = 0; i < holsterSetKeys.length; i += 1) {\n      holsterSets[holsterSetKeys[i]] = holsters[holsterSetKeys[i]].name;\n    }\n    return holsterSets;\n  }\n\n  static getHolsterNames(host, type) {\n    const holsterNameKeys = Object.keys(holsters[host].holsters[type].holsters);\n    const holsterNames = {};\n    for (let i = 0; i < holsterNameKeys.length; i += 1) {\n      const holsterData = holsters[host].holsters[type].holsters[holsterNameKeys[i]];\n      holsterNames[holsterNameKeys[i]] = {\n        name: holsterData.name,\n        role: holsterData.role,\n        icon: holsterData.icon,\n      };\n    }\n    return holsterNames;\n  }\n\n  static getNeededActionsForBag(prepop, main, multiplier) {\n    const actions = {};\n    for (let i = 0; i < prepop.length; i += 1) {\n      if (actions[prepop[i].name] > 0) {\n        actions[prepop[i].name] += (prepop[i].quantity * multiplier);\n      } else {\n        actions[prepop[i].name] = (prepop[i].quantity * multiplier);\n      }\n    }\n\n    for (let i = 0; i < main.length; i += 1) {\n      if (actions[main[i].name] > 0) {\n        actions[main[i].name] += (main[i].quantity * multiplier);\n      } else {\n        actions[main[i].name] = (main[i].quantity * multiplier);\n      }\n    }\n\n    return actions;\n  }\n\n  static getDecodedQuantity(encodedQuantity) {\n    const decodedQuantity = parseInt(encodedQuantity, 36);\n    if (!decodedQuantity || decodedQuantity < 0 || decodedQuantity > 35) {\n      return 1;\n    }\n    return decodedQuantity;\n  }\n\n  static encodeQuantity(quantity) {\n    if (!quantity || quantity < 0 || quantity > 35) {\n      return 1;\n    }\n    return quantity.toString(36);\n  }\n\n  static encodeHolster(prepopBag, mainBag) {\n    const holsterComponents = [];\n\n    for (let i = 0; i < prepopBag.length; i += 1) {\n      if (prepopBag[i].name !== '') {\n        const code = DRSLostActionHelper.getCodeForLostAction(prepopBag[i].name);\n        if (code) {\n          holsterComponents.push(`${DRSLostActionHelper.getCodeForLostAction(prepopBag[i].name)}${this.encodeQuantity(prepopBag[i].quantity)}`);\n        }\n      }\n    }\n\n    holsterComponents.push(',');\n\n    for (let i = 0; i < mainBag.length; i += 1) {\n      if (mainBag[i].name !== '') {\n        const code = DRSLostActionHelper.getCodeForLostAction(mainBag[i].name);\n        if (code) {\n          holsterComponents.push(`${DRSLostActionHelper.getCodeForLostAction(mainBag[i].name)}${this.encodeQuantity(mainBag[i].quantity)}`);\n        }\n      }\n    }\n\n    const holsterString = holsterComponents.join('');\n\n    return Buffer.from(holsterString).toString('base64');\n  }\n\n  static decodeHolster(holsterString) {\n    const encodedHolster = Buffer.from(holsterString, 'base64').toString();\n    const encodedBags = encodedHolster.split(',');\n\n    const encodedPrepopBag = encodedBags[0];\n    const prepopBagActions = encodedPrepopBag.match(/.{1,2}/g) ?? [];\n    const prepopHolster = [];\n\n    for (let i = 0; i < prepopBagActions.length; i += 1) {\n      const encodedAction = prepopBagActions[i];\n      if (encodedAction.length === 2) {\n        const name = DRSLostActionHelper.getLostActionFromCode(encodedAction[0]);\n        if (name) {\n          prepopHolster.push({\n            name,\n            quantity: this.getDecodedQuantity(encodedAction[1]),\n          });\n        }\n      }\n    }\n\n    const encodedMainBag = encodedBags[1] ?? '';\n    const mainBagActions = encodedMainBag.match(/.{1,2}/g) ?? [];\n    const mainHolster = [];\n\n    for (let i = 0; i < mainBagActions.length; i += 1) {\n      const encodedAction = mainBagActions[i];\n      if (encodedAction.length === 2) {\n        const name = DRSLostActionHelper.getLostActionFromCode(encodedAction[0]);\n        if (name) {\n          mainHolster.push({\n            name,\n            quantity: this.getDecodedQuantity(encodedAction[1]),\n          });\n        }\n      }\n    }\n\n    const holstersToReturn = {\n      prepop: prepopHolster,\n      main: mainHolster,\n    };\n\n    return holstersToReturn;\n  }\n}\n\nexport default DRSHolsterHelper;\n"],"names":["holsters","require","getHolsterData","host","type","loadoutName","holstersForType","undefined","getFriendlyHolsterSetName","set","name","getAvailableHolsterSets","holsterSetKeys","Object","keys","holsterSets","i","length","getHolsterNames","holsterNameKeys","holsterNames","holsterData","role","icon","getNeededActionsForBag","prepop","main","multiplier","actions","quantity","getDecodedQuantity","encodedQuantity","decodedQuantity","parseInt","encodeQuantity","toString","encodeHolster","prepopBag","mainBag","holsterComponents","DRSLostActionHelper","getCodeForLostAction","push","concat","this","holsterString","join","Buffer","from","decodeHolster","_encodedPrepopBag$mat","_encodedBags$","_encodedMainBag$match","encodedBags","split","prepopBagActions","match","prepopHolster","encodedAction","getLostActionFromCode","mainBagActions","mainHolster"],"sourceRoot":""}