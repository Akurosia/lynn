{"version":3,"file":"static/js/973.36b0057d.chunk.js","mappings":"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","sources":["../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/mdast-util-toc/lib/to-expression.js","../node_modules/mdast-util-toc/lib/search.js","../node_modules/mdast-util-toc/lib/contents.js","../node_modules/mdast-util-toc/lib/index.js","../node_modules/remark-toc/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/github-slugger/regex.js","../node_modules/github-slugger/index.js","../node_modules/extend/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/hast-util-heading-rank/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/inline-style-parser/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/devlop/lib/default.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/style-to-js/src/index.ts","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/style-to-js/src/utilities.ts","../node_modules/hast-util-is-element/lib/index.js","../node_modules/rehype-autolink-headings/lib/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/@mui/system/esm/Container/createContainer.js","../node_modules/@mui/material/Container/Container.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/hast-util-to-string/lib/index.js","../node_modules/rehype-slug/lib/index.js"],"sourcesContent":["export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * Transform a string into an applicable expression.\n *\n * @param {string} value\n * @returns {RegExp}\n */\nexport function toExpression(value) {\n  return new RegExp('^(' + value + ')$', 'i')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {Heading['depth']} Rank\n *\n */\n\n/**\n * @typedef SearchOptions\n *   Search configuration.\n * @property {Rank | null | undefined} [maxDepth=6]\n *   Maximum heading depth to include in the table of contents (default: `6`).\n *\n *   This is inclusive: when set to `3`, level three headings are included\n *   (those with three hashes, `###`).\n * @property {Rank | null | undefined} [minDepth=1]\n *   Minimum heading depth to include in the table of contents (default: `1`).\n *\n *   This is inclusive: when set to `3`, level three headings are included\n *   (those with three hashes, `###`).\n * @property {string | null | undefined} [skip]\n *   Headings to skip, wrapped in `new RegExp('^(' + value + ')$', 'i')`\n *   (default: `undefined`).\n *\n *   Any heading matching this expression will not be present in the table of\n *   contents.\n * @property {Test} [parents]\n *   Allow headings to be children of certain node types (default: the to `toc`\n *   given `tree`, to only allow top-level headings) (default:\n *   `d => d === tree`).\n *\n *   Internally, uses `unist-util-is` to check, so `parents` can be any\n *   `is`-compatible test.\n *\n * @typedef SearchEntry\n *   Entry.\n * @property {string} id\n *   ID of entry.\n * @property {Array<PhrasingContent>} children\n *   Contents of entry.\n * @property {Rank} depth\n *   Rank of entry.\n *\n * @typedef SearchResult\n *   Results.\n * @property {number} index\n *   Where the contents section starts, if looking for a heading.\n * @property {number} endIndex\n *   Where the contents section ends, if looking for a heading.\n * @property {Array<SearchEntry>} map\n *   List of entries.\n */\n\nimport Slugger from 'github-slugger'\nimport {toString} from 'mdast-util-to-string'\nimport {convert} from 'unist-util-is'\nimport {visit} from 'unist-util-visit'\nimport {toExpression} from './to-expression.js'\n\nconst slugs = new Slugger()\n\n/**\n * Search a node for a toc.\n *\n * @param {Nodes} root\n * @param {RegExp | undefined} expression\n * @param {SearchOptions} settings\n * @returns {SearchResult}\n */\nexport function search(root, expression, settings) {\n  const max = 'children' in root ? root.children.length : 0\n  const skip = settings.skip ? toExpression(settings.skip) : undefined\n  const parents = convert(\n    settings.parents ||\n      function (d) {\n        return d === root\n      }\n  )\n  /** @type {Array<SearchEntry>} */\n  const map = []\n  /** @type {number | undefined} */\n  let index\n  /** @type {number | undefined} */\n  let endIndex\n  /** @type {Heading | undefined} */\n  let opening\n\n  slugs.reset()\n\n  // Visit all headings in `root`.  We `slug` all headings (to account for\n  // duplicates), but only create a TOC from top-level headings (by default).\n  visit(root, 'heading', function (node, position, parent) {\n    const value = toString(node, {includeImageAlt: false})\n    /** @type {string} */\n    // @ts-expect-error `hProperties` from <https://github.com/syntax-tree/mdast-util-to-hast>\n    const id = node.data && node.data.hProperties && node.data.hProperties.id\n    const slug = slugs.slug(id || value)\n\n    if (!parents(parent)) {\n      return\n    }\n\n    // Our opening heading.\n    if (\n      position !== undefined &&\n      expression &&\n      !index &&\n      expression.test(value)\n    ) {\n      index = position + 1\n      opening = node\n      return\n    }\n\n    // Our closing heading.\n    if (\n      position !== undefined &&\n      opening &&\n      !endIndex &&\n      node.depth <= opening.depth\n    ) {\n      endIndex = position\n    }\n\n    // A heading after the closing (if we were looking for one).\n    if (\n      (endIndex || !expression) &&\n      (!settings.minDepth || node.depth >= settings.minDepth) &&\n      (!settings.maxDepth || node.depth <= settings.maxDepth) &&\n      (!skip || !skip.test(value))\n    ) {\n      map.push({depth: node.depth, children: node.children, id: slug})\n    }\n  })\n\n  return {\n    index: index === undefined ? -1 : index,\n    endIndex: index === undefined ? -1 : endIndex || max,\n    map\n  }\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('./search.js').SearchEntry} SearchEntry\n */\n\n/**\n * @typedef ContentsOptions\n *   Build configuration.\n * @property {boolean | null | undefined} [tight=false]\n *   Whether to compile list items tightly (default: `false`).\n * @property {boolean | null | undefined} [ordered=false]\n *   Whether to compile list items as an ordered list, otherwise they are\n *   unordered (default: `false`).\n * @property {string | null | undefined} [prefix=undefined]\n *   Add a prefix to links to headings in the table of contents (default:\n *   `undefined`).\n *\n *   Useful for example when later going from mdast to hast and sanitizing with\n *   `hast-util-sanitize`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\n\n/**\n * Transform a list of heading objects to a markdown list.\n *\n * @param {Array<SearchEntry>} map\n * @param {ContentsOptions} settings\n */\nexport function contents(map, settings) {\n  const {ordered = false, tight = false, prefix} = settings\n  /** @type {List} */\n  const table = {type: 'list', ordered, spread: false, children: []}\n  let minDepth = Number.POSITIVE_INFINITY\n  let index = -1\n\n  // Find minimum depth.\n  while (++index < map.length) {\n    if (map[index].depth < minDepth) {\n      minDepth = map[index].depth\n    }\n  }\n\n  // Normalize depth.\n  index = -1\n\n  while (++index < map.length) {\n    map[index].depth -= minDepth - 1\n  }\n\n  // Add TOC to list.\n  index = -1\n\n  while (++index < map.length) {\n    insert(map[index], table, {ordered, tight, prefix})\n  }\n\n  return table\n}\n\n/**\n * Insert an entry into `parent`.\n *\n * @param {SearchEntry} entry\n * @param {List | ListItem} parent\n * @param {ContentsOptions} settings\n */\nfunction insert(entry, parent, settings) {\n  let index = -1\n  const tail = parent.children[parent.children.length - 1]\n\n  if (parent.type === 'list') {\n    if (entry.depth === 1) {\n      parent.children.push({\n        type: 'listItem',\n        spread: false,\n        children: [\n          {\n            type: 'paragraph',\n            children: [\n              {\n                type: 'link',\n                title: null,\n                url: '#' + (settings.prefix || '') + entry.id,\n                children: all(entry.children)\n              }\n            ]\n          }\n        ]\n      })\n    } else if (parent.children.length > 0) {\n      const tail = parent.children[parent.children.length - 1]\n      insert(entry, tail, settings)\n    } else {\n      /** @type {ListItem} */\n      const item = {type: 'listItem', spread: false, children: []}\n      parent.children.push(item)\n      insert(entry, item, settings)\n    }\n  }\n  // List item.\n  else if (tail && tail.type === 'list') {\n    entry.depth--\n    insert(entry, tail, settings)\n  } else {\n    /** @type {List} */\n    const item = {\n      type: 'list',\n      ordered: settings.ordered,\n      spread: false,\n      children: []\n    }\n    parent.children.push(item)\n    entry.depth--\n    insert(entry, item, settings)\n  }\n\n  if (parent.type === 'list' && !settings.tight) {\n    parent.spread = false\n\n    while (++index < parent.children.length) {\n      if (parent.children[index].children.length > 1) {\n        parent.spread = true\n        break\n      }\n    }\n  } else {\n    parent.spread = !settings.tight\n  }\n}\n\n/**\n * @param {Array<PhrasingContent>} nodes\n * @returns {Array<PhrasingContent>}\n */\nfunction all(nodes) {\n  /** @type {Array<PhrasingContent>} */\n  const results = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const result = one(nodes[index])\n\n    if (Array.isArray(result)) {\n      results.push(...result)\n    } else {\n      results.push(result)\n    }\n  }\n\n  return results\n}\n\n/**\n * @param {PhrasingContent} node\n * @returns {Array<PhrasingContent> | PhrasingContent}\n */\nfunction one(node) {\n  if (node.type === 'footnoteReference') {\n    return []\n  }\n\n  if (node.type === 'link' || node.type === 'linkReference') {\n    return all(node.children)\n  }\n\n  if ('children' in node) {\n    const {children, position, ...copy} = node\n    return Object.assign(structuredClone(copy), {\n      children: all(node.children)\n    })\n  }\n\n  const {position, ...copy} = node\n  return structuredClone(copy)\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('./search.js').SearchOptions} SearchOptions\n * @typedef {import('./contents.js').ContentsOptions} ContentsOptions\n */\n\n/**\n * @typedef {ContentsOptions & ExtraOptions & SearchOptions} Options\n *\n * @typedef ExtraOptions\n *   Extra configuration fields.\n * @property {string | null | undefined} [heading]\n *   Heading to look for, wrapped in `new RegExp('^(' + value + ')$', 'i')`\n *   (default: `undefined`).\n *\n * @typedef Result\n *   Results.\n * @property {number | undefined} index\n *   Index of the node right after the table of contents heading, `-1` if no\n *   heading was found, `undefined` if no `heading` was given.\n * @property {number | undefined} endIndex\n *   Index of the first node after `heading` that is not part of its section,\n *   `-1` if no heading was found, `undefined` if no `heading` was given, same\n *   as `index` if there are no nodes between `heading` and the first heading\n *   in the table of contents.\n * @property {List | undefined} map\n *   List representing the generated table of contents, `undefined` if no table\n *   of contents could be created, either because no heading was found or\n *   because no following headings were found.\n */\n\nimport {search} from './search.js'\nimport {contents} from './contents.js'\nimport {toExpression} from './to-expression.js'\n\n/**\n * Generate a table of contents from `tree`.\n *\n * Looks for the first heading matching `options.heading` (case insensitive) and\n * returns a table of contents (a list) for all following headings.\n * If no `heading` is specified, creates a table of contents for all headings in\n * `tree`.\n * `tree` is not changed.\n *\n * Links in the list to headings are based on GitHub’s style.\n * Only top-level headings (those not in blockquotes or lists), are used.\n * This default behavior can be changed by passing `options.parents`.\n *\n * @param {Nodes} tree\n *   Tree to search and generate from.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Result}\n *   Results.\n */\nexport function toc(tree, options) {\n  const settings = options || {}\n  const heading = settings.heading ? toExpression(settings.heading) : undefined\n  const result = search(tree, heading, settings)\n\n  return {\n    index: heading ? result.index : undefined,\n    endIndex: heading ? result.endIndex : undefined,\n    map: result.map.length > 0 ? contents(result.map, settings) : undefined\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-toc').Options} Options\n */\n\nimport {toc} from 'mdast-util-toc'\n\n/**\n * Generate a table of contents (TOC).\n *\n * Looks for the first heading matching `options.heading` (case insensitive),\n * removes everything between it and an equal or higher next heading, and\n * replaces that with a list representing the rest of the document structure,\n * linking to all further headings.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function remarkToc(options) {\n  const settings = {\n    ...options,\n    heading: (options && options.heading) || '(table[ -]of[ -])?contents?|toc',\n    tight: options && typeof options.tight === 'boolean' ? options.tight : true\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    const result = toc(tree, settings)\n\n    if (\n      result.endIndex === undefined ||\n      result.endIndex === -1 ||\n      result.index === undefined ||\n      result.index === -1 ||\n      !result.map\n    ) {\n      return\n    }\n\n    tree.children = [\n      ...tree.children.slice(0, result.index),\n      result.map,\n      ...tree.children.slice(result.endIndex)\n    ]\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n/**\n * Get the rank (`1` to `6`) of headings (`h1` to `h6`).\n *\n * @param {Nodes} node\n *   Node to check.\n * @returns {number | undefined}\n *   Rank of the heading or `undefined` if not a heading.\n */\nexport function headingRank(node) {\n  const name = node.type === 'element' ? node.tagName.toLowerCase() : ''\n  const code =\n    name.length === 2 && name.charCodeAt(0) === 104 /* `h` */\n      ? name.charCodeAt(1)\n      : 0\n  return code > 48 /* `0` */ && code < 55 /* `7` */\n    ? code - 48 /* `0` */\n    : undefined\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","import StyleToObject from 'style-to-object';\n\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n\nStyleToJS.default = StyleToJS;\n\nexport = StyleToJS;\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is an element.\n * @param {unknown} this\n *   Context object (`this`) to call `test` with\n * @param {unknown} [element]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | null | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n *\n * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary element.\n *\n *   * when `string`, checks that the element has that tag name\n *   * when `function`, see `TestFunction`\n *   * when `Array`, checks if one of the subtests pass\n *\n * @callback TestFunction\n *   Check if an element passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Element} element\n *   An element.\n * @param {number | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean | undefined | void}\n *   Whether this element passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `element` is an `Element` and whether it passes the given test.\n *\n * @param element\n *   Thing to check, typically `element`.\n * @param test\n *   Check for a specific element.\n * @param index\n *   Position of `element` in its parent.\n * @param parent\n *   Parent of `element`.\n * @param context\n *   Context object (`this`) to call `test` with.\n * @returns\n *   Whether `element` is an `Element` and passes a test.\n * @throws\n *   When an incorrect `test`, `index`, or `parent` is given; there is no error\n *   thrown when `element` is not a node or not an element.\n */\nexport const isElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((element?: null | undefined) => false) &\n   *   ((element: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((element: unknown, test?: Test, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [element]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parents | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (element, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== null &&\n        index !== undefined &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite `index`')\n      }\n\n      if (\n        parent !== null &&\n        parent !== undefined &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected valid `parent`')\n      }\n\n      if (\n        (index === null || index === undefined) !==\n        (parent === null || parent === undefined)\n      ) {\n        throw new Error('Expected both `index` and `parent`')\n      }\n\n      return looksLikeAnElement(element)\n        ? check.call(context, element, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate a check from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * an `element`, `index`, and `parent`.\n *\n * @param test\n *   A test for a specific element.\n * @returns\n *   A check.\n */\nexport const convertElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      // Assume array.\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as `test`')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction tagNameFactory(check) {\n  return castFactory(tagName)\n\n  /**\n   * @param {Element} element\n   * @returns {boolean}\n   */\n  function tagName(element) {\n    return element.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeAnElement(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} element\n * @returns {element is Element}\n */\nfunction element(element) {\n  return Boolean(\n    element &&\n      typeof element === 'object' &&\n      'type' in element &&\n      element.type === 'element' &&\n      'tagName' in element &&\n      typeof element.tagName === 'string'\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Element}\n */\nfunction looksLikeAnElement(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    'type' in value &&\n    'tagName' in value\n  )\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hast-util-is-element').Test} Test\n */\n\n/**\n * @typedef {'after' | 'append' | 'before' | 'prepend' | 'wrap'} Behavior\n *   Behavior.\n *\n * @callback Build\n *   Generate content.\n * @param {Readonly<Element>} element\n *   Current heading.\n * @returns {Array<ElementContent> | ElementContent}\n *   Content.\n *\n * @callback BuildProperties\n *   Generate properties.\n * @param {Readonly<Element>} element\n *   Current heading.\n * @returns {Properties}\n *   Properties.\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior | null | undefined} [behavior='prepend']\n *   How to create links (default: `'prepend'`).\n * @property {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build | null | undefined} [content]\n *   Content to insert in the link (default: if `'wrap'` then `undefined`,\n *   otherwise `<span class=\"icon icon-link\"></span>`);\n *   if `behavior` is `'wrap'` and `Build` is passed, its result replaces the\n *   existing content, otherwise the content is added after existing content.\n * @property {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build | null | undefined} [group]\n *   Content to wrap the heading and link with, if `behavior` is `'after'` or\n *   `'before'` (optional).\n * @property {Readonly<Properties> | BuildProperties | null | undefined} [headingProperties]\n *   Extra properties to set on the heading (optional).\n * @property {Readonly<Properties> | BuildProperties | null | undefined} [properties]\n *   Extra properties to set on the link when injecting (default:\n *   `{ariaHidden: true, tabIndex: -1}` if `'append'` or `'prepend'`, otherwise\n *   `undefined`).\n * @property {Test | null | undefined} [test]\n *   Extra test for which headings are linked (optional).\n */\n\n/**\n * @template T\n *   Kind.\n * @typedef {(\n *   T extends Record<any, any>\n *     ? {-readonly [k in keyof T]: Cloneable<T[k]>}\n *     : T\n * )} Cloneable\n *   Deep clone.\n *\n *   See: <https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1237#issuecomment-1345515448>\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {convertElement} from 'hast-util-is-element'\nimport {SKIP, visit} from 'unist-util-visit'\n\n/** @type {Element} */\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add links from headings back to themselves.\n *\n * ###### Notes\n *\n * This plugin only applies to headings with `id`s.\n * Use `rehype-slug` to generate `id`s for headings that don’t have them.\n *\n * Several behaviors are supported:\n *\n * *   `'prepend'` (default) — inject link before the heading text\n * *   `'append'` — inject link after the heading text\n * *   `'wrap'` — wrap the whole heading text with the link\n * *   `'before'` — insert link before the heading\n * *   `'after'` — insert link after the heading\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeAutolinkHeadings(options) {\n  const settings = options || emptyOptions\n  let properties = settings.properties\n  const headingOroperties = settings.headingProperties\n  const behavior = settings.behavior || 'prepend'\n  const content = settings.content\n  const group = settings.group\n  const is = convertElement(settings.test)\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  let method\n\n  if (behavior === 'after' || behavior === 'before') {\n    method = around\n  } else if (behavior === 'wrap') {\n    method = wrap\n  } else {\n    method = inject\n\n    if (!properties) {\n      properties = {ariaHidden: 'true', tabIndex: -1}\n    }\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, 'element', function (node, index, parent) {\n      if (headingRank(node) && node.properties.id && is(node, index, parent)) {\n        Object.assign(node.properties, toProperties(headingOroperties, node))\n        return method(node, index, parent)\n      }\n    })\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function inject(node) {\n    const children = toChildren(content || contentDefaults, node)\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](\n      create(node, toProperties(properties, node), children)\n    )\n\n    return [SKIP]\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function around(node, index, parent) {\n    /* c8 ignore next -- uncommon */\n    if (typeof index !== 'number' || !parent) return\n\n    const children = toChildren(content || contentDefaults, node)\n    const link = create(node, toProperties(properties, node), children)\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (group) {\n      const grouping = toNode(group, node)\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes\n        nodes = [grouping]\n      }\n    }\n\n    parent.children.splice(index, 1, ...nodes)\n\n    return [SKIP, index + nodes.length]\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function wrap(node) {\n    /** @type {Array<ElementContent>} */\n    let before = node.children\n    /** @type {Array<ElementContent> | ElementContent} */\n    let after = []\n\n    if (typeof content === 'function') {\n      before = []\n      after = content(node)\n    } else if (content) {\n      after = clone(content)\n    }\n\n    node.children = [\n      create(\n        node,\n        toProperties(properties, node),\n        Array.isArray(after) ? [...before, ...after] : [...before, after]\n      )\n    ]\n\n    return [SKIP]\n  }\n}\n\n/**\n * Deep clone.\n *\n * @template T\n *   Kind.\n * @param {T} thing\n *   Thing to clone.\n * @returns {Cloneable<T>}\n *   Cloned thing.\n */\nfunction clone(thing) {\n  // Cast because it’s mutable now.\n  return /** @type {Cloneable<T>} */ (structuredClone(thing))\n}\n\n/**\n * Create an `a`.\n *\n * @param {Readonly<Element>} node\n *   Related heading.\n * @param {Properties | undefined} properties\n *   Properties to set on the link.\n * @param {Array<ElementContent>} children\n *   Content.\n * @returns {Element}\n *   Link.\n */\nfunction create(node, properties, children) {\n  return {\n    type: 'element',\n    tagName: 'a',\n    properties: {...properties, href: '#' + node.properties.id},\n    children\n  }\n}\n\n/**\n * Turn into children.\n *\n * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value\n *   Content.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Array<ElementContent>}\n *   Children.\n */\nfunction toChildren(value, node) {\n  const result = toNode(value, node)\n  return Array.isArray(result) ? result : [result]\n}\n\n/**\n * Turn into a node.\n *\n * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value\n *   Content.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Array<ElementContent> | ElementContent}\n *   Node.\n */\nfunction toNode(value, node) {\n  if (typeof value === 'function') return value(node)\n  return clone(value)\n}\n\n/**\n * Turn into properties.\n *\n * @param {Readonly<Properties> | BuildProperties | null | undefined} value\n *   Properties.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Properties}\n *   Properties.\n */\nfunction toProperties(value, node) {\n  if (typeof value === 'function') return value(node)\n  return value ? clone(value) : {}\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\", \"classes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '@mui/utils/capitalize';\nimport useThemePropsSystem from '../useThemeProps';\nimport systemStyled from '../styled';\nimport createTheme from '../createTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultTheme = createTheme();\nconst defaultCreateStyledComponent = systemStyled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n  }\n});\nconst useThemePropsDefault = inProps => useThemePropsSystem({\n  props: inProps,\n  name: 'MuiContainer',\n  defaultTheme\n});\nconst useUtilityClasses = (ownerState, componentName) => {\n  const getContainerUtilityClass = slot => {\n    return generateUtilityClass(componentName, slot);\n  };\n  const {\n    classes,\n    fixed,\n    disableGutters,\n    maxWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']\n  };\n  return composeClasses(slots, getContainerUtilityClass, classes);\n};\nexport default function createContainer(options = {}) {\n  const {\n    // This will allow adding custom styled fn (for example for custom sx style function)\n    createStyledComponent = defaultCreateStyledComponent,\n    useThemeProps = useThemePropsDefault,\n    componentName = 'MuiContainer'\n  } = options;\n  const ContainerRoot = createStyledComponent(({\n    theme,\n    ownerState\n  }) => _extends({\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    display: 'block'\n  }, !ownerState.disableGutters && {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }\n  }), ({\n    theme,\n    ownerState\n  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {\n    const breakpoint = breakpointValueKey;\n    const value = theme.breakpoints.values[breakpoint];\n    if (value !== 0) {\n      // @ts-ignore\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: `${value}${theme.breakpoints.unit}`\n      };\n    }\n    return acc;\n  }, {}), ({\n    theme,\n    ownerState\n  }) => _extends({}, ownerState.maxWidth === 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('xs')]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }\n  }, ownerState.maxWidth &&\n  // @ts-ignore module augmentation fails if custom breakpoints are used\n  ownerState.maxWidth !== 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up(ownerState.maxWidth)]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`\n    }\n  }));\n  const Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {\n    const props = useThemeProps(inProps);\n    const {\n        className,\n        component = 'div',\n        disableGutters = false,\n        fixed = false,\n        maxWidth = 'lg'\n      } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n    const ownerState = _extends({}, props, {\n      component,\n      disableGutters,\n      fixed,\n      maxWidth\n    });\n\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    const classes = useUtilityClasses(ownerState, componentName);\n    return (\n      /*#__PURE__*/\n      // @ts-ignore theme is injected by the styled util\n      _jsx(ContainerRoot, _extends({\n        as: component\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        ,\n        ownerState: ownerState,\n        className: clsx(classes.root, className),\n        ref: ref\n      }, other))\n    );\n  });\n  process.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    disableGutters: PropTypes.bool,\n    fixed: PropTypes.bool,\n    maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n  } : void 0;\n  return Container;\n}","'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useDefaultProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @import {Nodes, Parents} from 'hast'\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Nodes} node\n *   Node to serialize.\n * @returns {string}\n *   Serialized node.\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Nodes} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Parents} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction all(node) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('hast').Root} Root\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string} [prefix='']\n *   Prefix to add in front of `id`s (default: `''`).\n */\n\nimport GithubSlugger from 'github-slugger'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {toString} from 'hast-util-to-string'\nimport {visit} from 'unist-util-visit'\n\n/** @type {Options} */\nconst emptyOptions = {}\nconst slugs = new GithubSlugger()\n\n/**\n * Add `id`s to headings.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeSlug(options) {\n  const settings = options || emptyOptions\n  const prefix = settings.prefix || ''\n\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    slugs.reset()\n\n    visit(tree, 'element', function (node) {\n      if (headingRank(node) && !node.properties.id) {\n        node.properties.id = prefix + slugs.slug(toString(node))\n      }\n    })\n  }\n}\n"],"names":["env","self","globalThis","deserialize","serialized","deserializer","$","_","as","out","index","set","unpair","has","get","type","value","arr","push","object","key","Date","source","flags","RegExp","map","Map","Set","add","name","message","BigInt","Object","Uint8Array","buffer","DataView","EMPTY","toString","keys","typeOf","asString","call","slice","includes","shouldSkip","_ref","TYPE","serialize","json","lossy","arguments","length","undefined","serializer","strict","pair","entry","TypeError","spread","valueOf","toJSON","entries","toISOString","structuredClone","any","options","normalizeIdentifier","replace","toLowerCase","toUpperCase","toExpression","slugs","Slugger","contents","settings","ordered","tight","prefix","table","children","minDepth","Number","POSITIVE_INFINITY","depth","insert","parent","tail","title","url","id","all","item","nodes","results","result","one","Array","isArray","node","position","copy","_objectWithoutProperties","_excluded","assign","_excluded2","toc","tree","heading","root","expression","max","skip","parents","convert","d","endIndex","opening","reset","visit","includeImageAlt","data","hProperties","slug","test","maxDepth","search","remarkToc","_objectSpread","blankLine","partial","tokenize","effects","ok","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","resolveAll","constructs","events","context","called","resolve","regex","own","hasOwnProperty","BananaSlug","constructor","this","occurrences","maintainCase","originalSlug","create","hasOwn","prototype","toStr","defineProperty","gOPD","getOwnPropertyDescriptor","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","enumerable","configurable","newValue","writable","getProperty","module","exports","extend","src","copyIsArray","clone","i","deep","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","existing","list","before","splice","headingRank","tagName","charCodeAt","start","remove","items","end","parameters","chunkStart","from","unshift","style","iterator","styleObject","declarations","inline_style_parser_1","default","hasIterator","forEach","declaration","property","__importDefault","require","nameRe","nameReJsx","emptyOptions","jsx","re","empty","Schema","normal","space","merge","definitions","definition","normalize","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","checks","types","DefinedInfo","mask","super","mark","check","values","properties","normals","info","transform","attributes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","htmlBase","svgBase","cap","dash","valid","kebab","$0","camelcase","charAt","hastToReact","pointEnd","point","pointStart","line","column","stringifyPosition","pos","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","reason","legacyCause","place","ancestors","cause","ruleId","indexOf","fatal","file","stack","actual","expected","note","emptyMap","tableElements","tableCellElement","docs","toJsxRuntime","Fragment","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","findComponentFromName","alignValue","prop","createProperty","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","countsByName","count","Type","rest","dashes","find","isNaN","join","padRight","padLeft","trim","commas","styleToJs","reactCompat","error","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","urlAttributes","icon","SpliceBuffer","initial","RangeError","shift","setCursor","stop","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","consume","enter","exit","lineStart","document","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","_bufferIndex","_index","thematicBreak","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","limit","balance","enclosedBefore","asciiControl","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","asciiAlpha","fromCharCode","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","asciiHexDigit","characterEscape","asciiPunctuation","lineEnding","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","classifyCharacter","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","match","endPosition","TextDecoder","lastIndex","exec","ceil","preprocess","combined","remarkParse","doc","normalizeUri","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","listItemLoose","trimLines","last","lines","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","defaultUnknownHandler","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","unreachable","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","colon","questionMark","numberSign","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","whitespace","errorsList","msg","err","filename","silent","m","comments","c","val","ret","decl","decls","testOrVisitor","visitorOrReverse","maybeReverse","visitor","visitParents","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","regexCheck","unicodePunctuation","unicodeWhitespace","style_to_object_1","utilities_1","StyleToJS","camelCase","includeHtml","CONTINUE","EXIT","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","trimHyphen","skipCamelCase","convertElement","tagNameFactory","looksLikeAnElement","contentDefaults","rehypeAutolinkHeadings","headingOroperties","headingProperties","behavior","toChildren","toProperties","grouping","toNode","defaultTheme","createTheme","defaultCreateStyledComponent","systemStyled","overridesResolver","styles","ownerState","maxWidth","fixed","disableGutters","useThemePropsDefault","inProps","useThemePropsSystem","Container","createStyledComponent","useThemeProps","componentName","ContainerRoot","theme","_extends","marginLeft","boxSizing","marginRight","paddingLeft","paddingRight","breakpoints","up","_ref2","reduce","acc","breakpointValueKey","breakpoint","unit","_ref3","xs","React","ref","component","other","_objectWithoutPropertiesLoose","classes","useUtilityClasses","slots","composeClasses","generateUtilityClass","_jsx","clsx","createContainer","styled","useDefaultProps","ccount","findAndReplace","ignored","pairs","tupleOrList","tuple","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","createTracker","move","subexit","safe","associationId","gfmFootnoteToMarkdown","firstLineBlank","indentLines","containerFlow","mapAll","mapExceptFirst","unsafe","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","literalWithBreak","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","GithubSlugger","rehypeSlug"],"sourceRoot":""}